import { MafiaRole, roleEmojis, roleNames } from '@/enums';
import { GameHistory, PlayerState } from '@/types';
import { Message, EmbedBuilder } from 'discord.js';

export const stopGame = async (
  message: Message,
  gameHistory?: GameHistory,
  gameState?: PlayerState[],
  players?: PlayerState[],
  hostId?: string
) => {
  await message.edit({
    content: `–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞.${hostId ? ` –í–µ–¥—É—á–∏–π(-—á–∞): <@${hostId}>` : ''}`,
    components: [],
    ...(gameHistory && gameState && players
      ? { embeds: [getGameResult(gameHistory, players, gameState)] }
      : {})
  });
};

export const getGameResult = (
  gameHistory: GameHistory,
  players: PlayerState[],
  gameState: PlayerState[]
) => {
  const lines: string[] = [];

  // --- –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏ ---
  const totalPlayersAlive = gameState.filter(p => !!p).length;
  const mafiaCount = gameState.filter(
    p => p?.role === MafiaRole.MAFIA || p?.role === MafiaRole.DON
  ).length;
  const isManiac = gameState.some(p => p?.role === MafiaRole.MANIAC);

  let winner = '–ü–æ–º–∏–ª–∫–∞';
  if (totalPlayersAlive <= 1) {
    winner = '–ü–æ–º–∏–ª–∫–∞';
  } else if (isManiac && totalPlayersAlive <= 2) {
    winner = '–ú–∞–Ω—ñ—è–∫ ü©∏';
  } else if (!isManiac && mafiaCount === 0) {
    winner = '–ú—ñ—Å—Ç–æ üèôÔ∏è';
  } else if (mafiaCount >= totalPlayersAlive / 2) {
    winner = '–ú–∞—Ñ—ñ—è ü•∑üèª';
  }

  lines.push(`üèÜ **–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≥—Ä–∏:** ${winner}`);
  lines.push('');

  // --- –†–æ–ª—ñ ---
  lines.push('üé≠ **–†–æ–ª—ñ –≥—Ä–∞–≤—Ü—ñ–≤**');
  players.forEach((p, idx) => {
    const emoji = roleEmojis[p?.role as MafiaRole] ?? 'üë§';
    const roleName = roleNames[p?.role as MafiaRole] ?? '‚Äî';
    lines.push(`[${idx + 1}]${emoji} ${p?.player?.username} ‚Äî ${roleName}`);
  });
  lines.push(''); // –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

  const daysCount = gameHistory.days.length;

  for (let i = 0; i < daysCount; i++) {
    const day = gameHistory.days[i];
    const night = gameHistory.nights[i];

    // --- –î–µ–Ω—å ---
    lines.push(`üåû **–î–µ–Ω—å ${i + 1}**`);

    // –ù–æ–º—ñ–Ω–∞—Ü—ñ—ó
    if (day.nominations && day.nominations.length > 0) {
      for (const vote of day.nominations) {
        const from = players[vote.from];
        const to = players[vote.to];
        lines.push(
          `üì£ [${vote.from + 1}] ${from?.player.username ?? '‚Äî'} –≤–∏—Å—É–Ω—É–≤: [${vote.to + 1}] ${
            to?.player.username ?? '‚Äî'
          }`
        );
      }
    } else {
      lines.push(`üì£ –ù—ñ—Ö—Ç–æ –Ω–µ –≤–∏—Å—É–≤–∞–≤`);
    }

    // –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    if (day.voting) {
      if (day.voting.votes && day.voting.votes.length > 0) {
        for (const round of day.voting.votes) {
          for (const vote of round.votes) {
            const from = players[vote.from];
            const to = players[vote.to];
            lines.push(
              `üó≥Ô∏è [${vote.from + 1}] ${from?.player.username ?? '‚Äî'} –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ [${
                vote.to + 1
              }] ${to?.player.username ?? '‚Äî'}`
            );
          }
        }
      }
      if (day.voting.eliminated && day.voting.eliminated.length > 0) {
        const eliminatedNames = day.voting.eliminated
          .map(idx => `[${idx + 1}] ${players[idx]?.player.username ?? '‚Äî'}`)
          .join(', ');
        lines.push(`üíÄ –í–±–∏—Ç—ñ –≥—Ä–∞–≤—Ü—ñ: ${eliminatedNames}`);
      } else {
        lines.push(`üíÄ –ù—ñ—Ö—Ç–æ –Ω–µ –±—É–≤ –≤–±–∏—Ç–∏–π`);
      }
    } else {
      lines.push(`üó≥Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—è`);
    }

    lines.push(''); // –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

    // --- –ù—ñ—á ---
    if (night) {
      lines.push(`üåô **–ù—ñ—á ${i + 1}**`);

      if (night.mafiaKill >= 0) {
        const target = players[night.mafiaKill];
        lines.push(`üíÄ –ú–∞—Ñ—ñ—è –≤–±–∏–ª–∞: [${night.mafiaKill + 1}] ${target?.player.username ?? '‚Äî'}`);
      } else {
        lines.push(`üíÄ –ú–∞—Ñ—ñ—è –Ω–µ –≤–±–∏–ª–∞`);
      }

      if (night.donCheck !== undefined && night.donCheck >= 0) {
        const target = players[night.donCheck];
        lines.push(`üïµÔ∏è –î–æ–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∏–≤: [${night.donCheck + 1}] ${target?.player.username ?? '‚Äî'}`);
      }

      if (night.maniacKill !== undefined && night.maniacKill >= 0) {
        const target = players[night.maniacKill];
        lines.push(`üî™ –ú–∞–Ω—ñ—è–∫ –≤–±–∏–≤: [${night.maniacKill + 1}] ${target?.player.username ?? '‚Äî'}`);
      }

      if (night.commissarCheck >= 0) {
        const target = players[night.commissarCheck];
        lines.push(
          `üïµÔ∏è‚Äç‚ôÇÔ∏è –ö–æ–º—ñ—Å–∞—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏–≤: [${night.commissarCheck + 1}] ${target?.player.username ?? '‚Äî'}`
        );
      }

      if (night.doctorHeal !== undefined && night.doctorHeal >= 0) {
        const target = players[night.doctorHeal];
        lines.push(
          `üíâ –õ—ñ–∫–∞—Ä –≤—Ä—è—Ç—É–≤–∞–≤: [${night.doctorHeal + 1}] ${target?.player.username ?? '‚Äî'}`
        );
      }

      lines.push('');
    }
  }

  return {
    title: '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∏',
    description: lines.join('\n')
  };
};

export const isGameFinished = (players: PlayerState[]) => {
  const totalPlayersAlive = players.filter(p => !!p).length;

  const mafiaCount = players.filter(
    p => p?.role === MafiaRole.MAFIA || p?.role === MafiaRole.DON
  ).length;

  const isManiac = players.some(p => p?.role === MafiaRole.MANIAC);

  return (
    totalPlayersAlive <= 1 || // Error (probably?)
    (isManiac && totalPlayersAlive <= 2) || // Maniac wins
    (!isManiac && mafiaCount === 0) || // City wins
    mafiaCount >= totalPlayersAlive / 2 // Mafia wins
  );
};
